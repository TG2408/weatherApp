{"version":3,"sources":["components/weather/style.module.css","components/weather/WeatherCard.js","components/weather/Weather.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","WeatherCard","weatherInfo","useState","weatherState","setWeatherState","temp","humidity","pressure","weatherMood","name","speed","country","sunset","useEffect","sunsetTime","Date","toLocaleTimeString","console","log","className","styles","widget","weatherIcon","basicInfo","weatherConditions","place","date","toLocaleString","extraInfo","wind","Weather","city","setCity","setWeatherInfo","getWeather","a","url","fetch","res","json","data","main","weather","sys","searchWrap","searchBox","htmlFor","type","placeholder","autoFocus","id","searchInput","value","onChange","e","target","searchButton","onClick","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a8fa14d0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"searchBox\":\"style_searchBox__3O3-7\",\"widget\":\"style_widget__2I1Ll\",\"weatherIcon\":\"style_weatherIcon__1HqRe\",\"basicInfo\":\"style_basicInfo__2vx-H\",\"weatherInfo\":\"style_weatherInfo__1RSGQ\",\"weatherConditions\":\"style_weatherConditions__21p6I\",\"place\":\"style_place__2Geay\",\"date\":\"style_date__1Et5-\",\"extraInfo\":\"style_extraInfo__PwNt3\",\"sunset\":\"style_sunset__1KTeS\",\"humidity\":\"style_humidity__1sP1y\",\"pressure\":\"style_pressure__3pcyd\",\"wind\":\"style_wind__jPcao\"};","import React, {useState, useEffect} from \"react\";\r\nimport styles from './style.module.css'\r\nimport './weather-icons.min.css'\r\n\r\nconst WeatherCard = ( { weatherInfo } ) => {\r\n\r\n    const [weatherState, setWeatherState] = useState(\"\");\r\n\r\n    const {\r\n        temp,\r\n        humidity,\r\n        pressure,\r\n        weatherMood,\r\n        name,\r\n        speed,\r\n        country,\r\n        sunset\r\n    } = weatherInfo;\r\n\r\n    useEffect(() => {\r\n        if(weatherMood) {\r\n            switch (weatherMood) {\r\n                case \"Sunny\":\r\n                    setWeatherState(`wi wi-day-sunny`);\r\n                    break;\r\n                case \"Clouds\":\r\n                    setWeatherState(`wi wi-day-cloudy`);\r\n                    break;\r\n                case \"Haze\":\r\n                    setWeatherState(`wi wi-day-haze`);\r\n                break;\r\n                case \"Rainy\":\r\n                    setWeatherState(\"wi wi-day-thunderstorm\")\r\n                break;\r\n                default:\r\n                    setWeatherState(`wi wi-day-sunny`);\r\n                    break;\r\n            }\r\n\r\n        }\r\n    },[weatherMood])\r\n\r\n\r\n    let sunsetTime = new Date(sunset*1000).toLocaleTimeString();\r\n    console.log(new Date(sunset))\r\n    return (\r\n        <>\r\n            <article className={styles.widget}>\r\n                <div className={styles.weatherIcon}>\r\n                    <i className={weatherState}></i>\r\n                </div>\r\n                \r\n                <div className={styles.basicInfo}>\r\n                    <div className={styles.weatherInfo}>\r\n                        <span>{temp}&deg;</span>\r\n                    </div>\r\n                    <div className={styles.weatherConditions}>\r\n                        {weatherMood}  \r\n                    </div>\r\n                    <div className={styles.place}>\r\n                        {name}, {country}\r\n                    </div>\r\n                    <div className={styles.date}>\r\n                        {new Date().toLocaleString()}\r\n                    </div>\r\n                </div>\r\n\r\n                {/* Our 4 devided section */}\r\n                <div className={styles.extraInfo}>\r\n                    <div className={styles.sunset}>\r\n                        <i className=\"wi wi-sunset\"></i>    \r\n                        <i>{sunsetTime} Sunset</i>\r\n                    </div>\r\n                    <div className={styles.humidity}>\r\n                        <i className=\"wi wi-humidity\"></i>    \r\n                        <i>{humidity} %</i>\r\n                    </div>\r\n                    <div className={styles.pressure}>\r\n                        <i className=\"wi wi-night-cloudy-windy\"></i>    \r\n                        <i>{pressure}</i>\r\n                    </div>\r\n                    <div className={styles.wind}> \r\n                        <i className=\"wi wi-wind-beaufort-0\"></i>    \r\n                        <i>{speed} km/h</i>\r\n                    </div>\r\n                </div>\r\n            </article>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default WeatherCard;","//https://api.openweathermap.org/data/2.5/weather?q=delhi&appid=7adf3a153b451eea706144e62dab30a1\r\n\r\nimport {useState, useEffect} from \"react\";\r\nimport styles from './style.module.css'\r\nimport './weather-icons.min.css'\r\nimport WeatherCard from \"./WeatherCard\";\r\n\r\n\r\nconst Weather = () => {\r\n    // fetch(\"https://api.openweathermap.org/data/2.5/weather?q=delhi&appid=7adf3a153b451eea706144e62dab30a1\")\r\n    // .then(x => x.text())\r\n    // .then(y => document.getElementById(\"temp\").innerHTML = typeof y);\r\n\r\n    const [city,setCity] = useState('delhi');\r\n    const [weatherInfo, setWeatherInfo] = useState({});\r\n\r\n    useEffect(() => {\r\n        getWeather();\r\n    },[])\r\n\r\n    const getWeather = async() => {\r\n        try {\r\n            let url = `https://api.openweathermap.org/data/2.5/weather?q=${city}&units=metric&appid=7adf3a153b451eea706144e62dab30a1`\r\n\r\n            const res = await fetch(url);\r\n            const data = await res.json();\r\n\r\n            const { temp, humidity, pressure } = data.main;\r\n            const {main: weatherMood} = data.weather[0];\r\n            const { name } = data;\r\n            const { speed } = data.wind;\r\n            const { country, sunset} = data.sys;\r\n            \r\n            const myWeatherInfo = {\r\n                temp,\r\n                humidity,\r\n                pressure,\r\n                weatherMood,\r\n                name,\r\n                speed,\r\n                country,\r\n                sunset\r\n            }\r\n\r\n            setWeatherInfo(myWeatherInfo);\r\n\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    const handleChange = (e) => {\r\n        setCity(e.target.value)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h1> Weather App</h1>\r\n            <div className={styles.searchWrap}>\r\n                <div className={styles.searchBox}>\r\n                    <label htmlFor=\"searchID\">Search City</label>\r\n                    <input type=\"search\"\r\n                        placeholder=\"search.....\"\r\n                        autoFocus\r\n                        id=\"searchID\"\r\n                        className={styles.searchInput}\r\n                        value = {city}\r\n                        onChange = {handleChange}\r\n                    />\r\n                    <button \r\n                        className={styles.searchButton} \r\n                        type=\"button\"\r\n                        onClick={getWeather}>\r\n                        Search\r\n                    </button>\r\n                </div>\r\n            </div>\r\n            \r\n            <WeatherCard weatherInfo={weatherInfo}/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Weather;","import Weather from \"./components/weather/Weather\";\r\n\r\nfunction App() {\r\n  return(\r\n    <>\r\n      <Weather/>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}